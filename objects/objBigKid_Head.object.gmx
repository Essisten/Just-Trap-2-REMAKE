<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprBigJust_Head</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-22</depth>
  <persistent>0</persistent>
  <parentName>objPlayerKiller</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
image_speed = 0;
canParry = false;
bullet = noone;
bounce_counter = 0;
HP = 50;
maxHP = HP;
image_xscale = 16;
image_yscale = image_xscale;
with (instance_create(view_xview[0] + view_wview[0], view_yview[0] + view_hview[0] - 192, objCard))
{
    image_index = 5;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!other.reflected)
   exit;
bullet = other;
event_perform(ev_collision, objBullet);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!instance_exists(bullet))
   bullet = instance_nearest(x, y, objBullet);
HP -= bullet.dmg;
event_user(1);
if (HP &lt; 0)
{
    event_user(0);
}
if (instance_exists(objBigJust_Healthbar))
{
    with (objBigJust_Healthbar)
    {
        HP = other.HP;
        alarm[0] = 50;
    }
}
instance_destroy(bullet);
scrPlaySound(sndBossHit);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack
var v_w = view_xview[0] + view_wview[0];
var v_h = view_yview[0] + view_hview[0];
var tmp = (maxHP - HP) div 10;
var fruit_spd = (global.difficulty + 2) * 1.5;
var tmpHP = (maxHP - HP) + (global.difficulty - 1) * 10;
bounce_counter = instance_number(objBigKid_BounceFruit);
if (bounce_counter &lt; ceil((objBigKid_BG.phase + 1) * ((maxHP - HP) div 20)) / (4 - global.difficulty))
{
    with (instance_create(x, y, objBigKid_BounceFruit))
    {
        direction = random(360);
        speed = fruit_spd / 2;
    }
}
switch (objBigKid_BG.phase)
{
    case 0:
         if (global.difficulty == 3)
         {
            if (HP &lt; 10)
               fruit_spd *= 2;
            for (var i = 0; i &lt; tmp + 1; i++)
            {
                with (instance_create(v_w, random_range(256, 448), objCherry))
                     hspeed = -fruit_spd * random_range(0.6, 1);
                with (instance_create(random_range(160, 416), v_h, objCherry))
                     vspeed = -fruit_spd * random_range(0.6, 1);
                with (instance_create(random_range(160, 416), view_yview[0], objCherry))
                     vspeed = fruit_spd * random_range(0.6, 1);
                with (instance_create(view_xview[0], random_range(256, 448), objCherry))
                     hspeed = fruit_spd * random_range(0.6, 1);
            }
         }
         else
         {
            if (tmpHP &gt; 10)
                with (instance_create(random_range(160, 416), view_yview[0], objCherry))
                     vspeed = fruit_spd * random_range(0.6, 1);
            if (tmpHP &gt; 20)
                with (instance_create(random_range(160, 416), v_h, objCherry))
                     vspeed = -fruit_spd * random_range(0.6, 1);
            if (tmpHP &gt; 30)
                with (instance_create(v_w, random_range(256, 448), objCherry))
                     hspeed = -fruit_spd * random_range(0.6, 1);
            if (tmpHP &gt; 40)
                with (instance_create(view_xview[0], random_range(256, 448), objCherry))
                     hspeed = fruit_spd * random_range(0.6, 1);
         }
         break;
    case 1:
         if (tmpHP &gt; 10)
         {
            var f, type_obj = objCherry;
            if (tmpHP &gt; 50)
               type_obj = objCrimsonCherry;
            f = instance_create(v_w, view_yview + (view_hview[0] / 2), type_obj);
            f.direction = point_direction(x, y, objPlayer.x, objPlayer.y);
            if (tmpHP &gt; 50)
            {
               f.direction = 180;
               f.x = x + 64;
               f.y = objPlayer.y;
            }
            f.speed = fruit_spd;
         }
         if (tmpHP &gt; 20)
         {
            var yy = random_range(view_yview[0], v_h);
            var amount = 8 * (global.difficulty + 1);
            for (var i = 1; i &lt;= 8 * (global.difficulty + 1); i++)
            {
                var f = instance_create(v_w, yy, objCherry);
                f.speed = fruit_spd;
                f.direction = 90 + 180 / amount * i;
                f.sprite_index = sprCherry_Colorful;
                f.image_blend = c_yellow;
            }
         }
         if (tmpHP &gt; 30)
         {
            var xx = objPlayer.x;
            f[0] = instance_create(view_xview[0], view_yview[0], objCherry);
            f[1] = instance_create(view_xview[0], v_h, objCherry);
            if (global.difficulty == 3)
            {
                f[2] = instance_create(v_w, view_yview[0], objCherry);
                f[3] = instance_create(v_w, v_h, objCherry);
            }
            for (var i = 0; i &lt; array_length_1d(f); i++)
            {
                f[i].speed = fruit_spd;
                f[i].sprite_index = sprCherry_Colorful;
                f[i].direction = point_direction(f[i].x, f[i].y, xx, view_yview[0] + view_hview[0] / 2);
                f[i].image_blend = c_blue;
            }
         }
         if (tmpHP &gt; 40)
         {
                g[0] = instance_create(view_xview[0], random_range(256, 448), objCherry);
                g[0].hspeed = fruit_spd / 2;
                if (global.difficulty &gt; 0)
                {
                   g[1] = instance_create(v_w, random_range(256, 448), objCherry);
                   g[1].hspeed = -fruit_spd / 2;
                }
                if (global.difficulty == 3)
                {
                    g[2] = instance_create(random_range(160, 416), v_h, objCherry);
                    g[2].vspeed = -fruit_spd / 2;
                    g[3] = instance_create(random_range(160, 416), view_yview[0], objCherry);
                    g[3].vspeed = fruit_spd / 2;
                }
                for (var i = 0; i &lt; array_length_1d(g); i++)
                {
                    g[i].sprite_index = sprCherry_Colorful;
                    g[i].image_blend = c_lime;
                }
         }
         break;
}
with (objCherry)
     depth = -110;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Phase changed
HP = maxHP;
objBigJust_Healthbar.oldHP = maxHP;
objBigKid_BG.phase++;
image_index = objBigKid_BG.phase;
scrCreateFade(c_white, 0.05, false);
if (global.difficulty &lt; 3)
   scrDamagePlayer(-1, false);
with (instance_create(view_xview[0] + view_wview[0], view_yview[0] + view_hview[0] - 192, objCard))
{
    image_index = objBigKid_BG.phase + 4;
    if (objBigKid_BG.phase == 1)
       image_index = 3;
}
with (objBigKid_Bullet)
     event_user(0);
with (objBigKid_Body)
   event_user(0);
switch (objBigKid_BG.phase)
{
    case 1:
         with (objBlock)
         {
              sprite_index = sprBoss3_Block;
              image_speed = 0;
         }
         with (objSpikeParent)
              image_blend = c_red;
         with (objBigBow)
         {
              image_index = 1;
              depth = -20;
         }
         break;
    case 2:
         with (objBigBow)
         {
              image_index = 2;
              depth = -30;
         }
         with (objSpikeParent)
         {
            image_blend = c_white;
            sprite_index = sprBigKid_GaySpike;
         }
         with (objBlock)
             sprite_index = sprBigKid_Brick1;
         with (objBigKid_BG)
            bottom_wall.image_index = 1;
         instance_create(random_range(160, 416), view_yview[0], objDeadShiratama);
         break;
    case 3:
         with (objBigBow)
         {
              image_index = 3;
              image_angle = 0;
         }
         with (objSpikeParent)
            sprite_index = sprBigKid_SolgrynSpike;
         with (objBlock)
              sprite_index = sprBigKid_Brick3;
         break;
    case 4:
         with (objBigBow)
              image_index = 0;
         with (objSpikeParent)
            sprite_index = sprBigKid_GaySpike;
         with (objBlock)
              sprite_index = sprBigKid_Brick2;
         break;
    case 5:
         with (objSpikeParent)
         {
            sprite_index = sprBigKid_KamiliaSpike;
         }
         depth = -19;
         with (objBigKid_BG)
         {
            with (objBlock)
                 sprite_index = sprBigKamilia_Block;
            with (top_wall)
                 image_index = 1;
            with (left_wall)
                 image_index = 2;
            with (right_wall)
                 image_index = 2;
            with (bottom_wall)
                 sprite_index = sprBigKamilia_Platform;
         }
         break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
