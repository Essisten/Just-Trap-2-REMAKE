<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-30</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>side[0] = 0
side[1] = 0;
surf[0] = surface_create(400, 608);
surf[1] = surface_create(400, 608);
view_surface_id[1] = surf[1];
view_surface_id[2] = surf[0];
w = 0;
old[0] = 0;
old[1] = 0;
changeW[0] = 0;
changeW[1] = 500;
final = false;
smoke = part_type_create();
part_type_alpha1(smoke, 0.2);
part_type_life(smoke, 50, 200);
part_type_direction(smoke, 80, 100, 0, 5);
part_type_shape(smoke, pt_shape_smoke);
part_type_colour1(smoke, c_ltgray);
part_type_speed(smoke, 2, 6, 0, 0);
part_type_size(smoke, 1, 2, -0.05, 0);
global.noPause = true;
snow = part_type_create();
part_type_alpha1(snow, 0.2);
part_type_life(snow, 500, 900);
part_type_direction(snow, 260, 280, 0, 0);
part_type_shape(snow, pt_shape_snow);
part_type_colour1(snow, c_white);
part_type_speed(snow, 2, 6, 0, 0);
part_type_size(snow, 0.1, 0.2, 0, 0);
emitter[0] = -1;
emitter[1] = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Creating emitters

emitter[0] = part_emitter_create(global.portalParticleSystem);
emitter[1] = part_emitter_create(global.saveParticleSystem);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing final
if (final)
{
    draw_set_blend_mode_ext(bm_inv_dest_color, bm_inv_dest_color);
    draw_set_colour(c_white);
    draw_rectangle(400 - w, 0, 400 + w, 608, false);
    if (instance_exists(objJustination))
    {
        if (w &lt; 500)
            w += 4;
        else
        {
            w = 500;
            with (objBoss4_Spike)
            {
                kill = true;
                image_alpha = 1;
            }
        }
    }
    else
    {
        if (w &gt; 0)
            w -= 4;
        else
        {
            w = 0;
            with (objBoss4_Spike)
            {
                kill = true;
            }
            objWorld.alarm[2] = 300;
            instance_destroy();
            view_visible[2] = false;
            view_visible[1] = false;
            exit;
        }
    }
    draw_set_blend_mode(bm_normal);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objBoss4_Effects</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Left side
if (final)
    return -1;
if (!surface_exists(surf[0]))
{
    surf[0] = surface_create(400, 608);
    view_surface_id[2] = surf[0];
}

if (side[0] != old[0])
{
    changeW[0] = max(0, changeW[0] - 8);
    if (changeW[0] == 0)
    {
        old[0] = side[0];
        part_emitter_destroy(global.portalParticleSystem, emitter[0]);
    }
}
else
    changeW[0] = min(500, changeW[0] + 8);
    
surface_set_target(surf[0]);
switch (old[0])
{
    case objJustinationDark:
        draw_clear_alpha(c_white, 0);
        draw_set_blend_mode(bm_subtract);
        var color = c_black;
        var color2 = 100 - global.difficulty * 20;
        if (objJustinationDark.HP &lt;= 0)
            color = make_colour_rgb(color2, color2, color2);
        draw_set_colour(color);
        draw_rectangle(0, 0, -150 + changeW[0], 608, false);
        draw_rectangle_colour(-149 + changeW[0], 0, 400, 608, color, c_white, c_white, color, false);
        color2 /= 20;
        color = make_colour_rgb(color2, color2, color2);
        if (instance_exists(objPlayer))
        {
            if (objPlayer.x &lt; 600)
            {
                var xx = objPlayer.x;
                var yy = objPlayer.y;
                var rad = (220 - global.difficulty * 60) * (changeW[0] / 500);
                draw_ellipse_colour(xx - rad, yy - rad, xx + rad, yy + rad, c_white, color, false);
            }
        }
        
        if (objJustinationLight.active and objJustinationLight.HP &gt; 0)
        {
            var xx = objJustinationLight.x;
            var yy = objJustinationLight.y;
            var rad = 160 * (0.9 + sin(degtorad(objJustinationLight.dick)) * 0.1) * (changeW[0] / 500);
            draw_ellipse_colour(xx - rad * 2, yy - rad, xx + rad * 2, yy + rad, c_white, color, false);
        }
        if (objJustinationDark.HP &gt; 0)
        {
            var xx = objJustinationDark.x;
            var yy = objJustinationDark.y;
            var rad = 200 * (changeW[0] / 500) * (0.9 + sin(degtorad(objJustinationDark.image_angle)) * 0.1);
            draw_ellipse_colour(xx - rad, yy - rad, xx + rad, yy + rad, c_red, color, false);
        }
        break;
    case objJustinationLight:
        draw_clear_alpha(c_black, 0);
        draw_set_blend_mode(bm_add);
        var c = 150 + global.difficulty * 20;
        var color = make_colour_rgb(c, c, c);
        if (objJustinationLight.HP &lt;= 0)
            color = make_colour_rgb(c/2, c/2, c/2);
        draw_set_colour(color);
        draw_rectangle(0, 0, -150 + changeW[0], 608, false);
        draw_rectangle_colour(-149 + changeW[0], 0, -100 + changeW[0], 608, color, c_black, c_black, color, false);
        break;
    case objJustinationFire:
        draw_clear_alpha(c_black, 0);
        if (!part_emitter_exists(global.portalParticleSystem, emitter[0]) and objJustinationFire.HP &gt; 0 and global.particles)
        {
            emitter[0] = part_emitter_create(global.portalParticleSystem);
            part_emitter_region(global.portalParticleSystem, emitter[0], 32, 400, 676, 676, pt_shape_line, ps_distr_linear);
            part_emitter_stream(global.portalParticleSystem, emitter[0], smoke, 1);
            if (objJustinationFire.HP &gt; 50)
                part_type_speed(smoke, 2, 6, 0, 0);
            else
                part_type_speed(smoke, 5, 15, 0, 0);
        }
        draw_set_blend_mode(bm_add);
        draw_rectangle_colour(0, 0, -100 + changeW[0], 608, c_maroon, c_black, c_black, c_maroon, false);
        break;
    case objJustinationIce:
        draw_clear_alpha(c_black, 0);
        if (!part_emitter_exists(global.portalParticleSystem, emitter[0]) and objJustinationIce.HP &gt; 0 and global.particles)
        {
            emitter[0] = part_emitter_create(global.portalParticleSystem);
            part_emitter_region(global.portalParticleSystem, emitter[0], 32, 400, 0, 0, pt_shape_line, ps_distr_linear);
            if (objJustinationIce.HP &gt; 50)
            {
                part_type_speed(snow, 2, 6, 0, 0);
                part_emitter_stream(global.portalParticleSystem, emitter[0], snow, 1);
            }
            else
            {
                part_type_speed(snow, 5, 10, 0, 0);
                part_emitter_stream(global.portalParticleSystem, emitter[0], snow, 5);
            }
        }
        draw_set_blend_mode(bm_add);
        draw_rectangle_colour(0, 0, -100 + changeW[0], 608, c_teal, c_black, c_black, c_teal, false);
        break;
    default:
        draw_clear_alpha(c_black, 0);
        break;
}
surface_reset_target();
draw_surface(surf[0], 0, 0);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Right side
if (final)
    return -1;
if (!surface_exists(surf[1]))
{
    surf[1] = surface_create(400, 608);
    view_surface_id[1] = surf[1];
}

if (side[1] != old[1])
{
    changeW[1] = min(500, changeW[1] + 8);
    if (changeW[1] == 500)
    {
        old[1] = side[1];
        part_emitter_destroy(global.saveParticleSystem, emitter[1]);
    }
}
else
    changeW[1] = max(0, changeW[1] - 8);

surface_set_target(surf[1]);
var xsurf = 400;
switch (old[1])
{
    case objJustinationDark:
        draw_clear_alpha(c_white, 0);
        draw_set_blend_mode(bm_subtract);
        var color = c_black;
        var color2 = 100 - global.difficulty * 20;
        if (objJustinationDark.HP &lt;= 0)
            color = make_colour_rgb(color2, color2, color2);
        draw_set_colour(color);
        draw_rectangle(50 + changeW[1], 0, 400, 608, false);
        draw_rectangle_colour(0, 0, 49 + changeW[1], 608, c_white, color, color, c_white, false);
        color2 /= 20;
        color = make_colour_rgb(color2, color2, color2);
        if (instance_exists(objPlayer))
        {
            if (objPlayer.x &gt; 200)
            {
                var xx = objPlayer.x - xsurf;
                var yy = objPlayer.y;
                var rad = 220 - global.difficulty * 60;
                draw_ellipse_colour(xx - rad, yy - rad, xx + rad, yy + rad, c_white, color, false);
            }
        }
        if (objJustinationIce.active and objJustinationIce.HP &gt; 0)
        {
            var xx = objJustinationIce.x - xsurf;
            var yy = objJustinationIce.y;
            var rad = 200 * abs((-changeW[1] + 500) / 500) * (0.9 + sin(degtorad(objJustinationIce.dick)) * 0.1);
            draw_ellipse_colour(xx - rad * 2, yy - rad, xx + rad * 2, yy + rad, c_teal, color, false);
        }
        if (objJustinationFire.active and objJustinationFire.HP &gt; 0)
        {
            var xx = objJustinationFire.x - xsurf;
            var yy = objJustinationFire.y;
            var rad = 160 * abs((-changeW[1] + 500) / 500) * (0.9 + sin(degtorad(objJustinationFire.dick)) * 0.1);
            draw_ellipse_colour(xx - rad * 2, yy - rad, xx + rad * 2, yy + rad, c_red, color, false);
        }
        break;
    case objJustinationLight:
        draw_clear_alpha(c_black, 0);
        draw_set_blend_mode(bm_add);
        var c = 150 + global.difficulty * 20;
        var color = make_colour_rgb(c, c, c);
        if (objJustinationLight.HP &lt;= 0)
            color = make_colour_rgb(c/2, c/2, c/2);
        draw_set_colour(color);
        draw_rectangle(50 + changeW[1], 0, 400 + changeW[1], 608, false);
        draw_rectangle_colour(0 + changeW[1], 0, 49 + changeW[1], 608, c_black, color, color, c_black, false);
        break;
    case objJustinationFire:
        draw_clear_alpha(c_black, 0);
        if (!part_emitter_exists(global.saveParticleSystem, emitter[1]) and objJustinationFire.HP &gt; 0 and global.particles)
        {
            emitter[1] = part_emitter_create(global.saveParticleSystem);
            part_emitter_region(global.saveParticleSystem, emitter[1], 32 + xsurf, 400 + xsurf, 676, 676, pt_shape_line, ps_distr_linear);
            part_emitter_stream(global.saveParticleSystem, emitter[1], smoke, -1);
            if (objJustinationFire.HP &gt; 50)
                part_type_speed(smoke, 2, 6, 0, 0);
            else
                part_type_speed(smoke, 5, 15, 0, 0);
        }
        draw_set_blend_mode(bm_add);
        draw_rectangle_colour(0 + changeW[1], 0, 400 + changeW[1], 608, c_black, c_maroon, c_maroon, c_black, false);
        break;
    case objJustinationIce:
        draw_clear_alpha(c_black, 0);
        if (!part_emitter_exists(global.saveParticleSystem, emitter[1]) and objJustinationIce.HP &gt; 0 and global.particles)
        {
            emitter[1] = part_emitter_create(global.saveParticleSystem);
            part_emitter_region(global.saveParticleSystem, emitter[1], 32 + xsurf, 400 + xsurf, 0, 0, pt_shape_line, ps_distr_linear);
            if (objJustinationIce.HP &gt; 50)
            {
                part_type_speed(snow, 2, 6, 0, 0);
                part_emitter_stream(global.saveParticleSystem, emitter[1], snow, 1);
            }
            else
            {
                part_type_speed(snow, 5, 10, 0, 0);
                part_emitter_stream(global.saveParticleSystem, emitter[1], snow, 5);
            }
        }
        draw_set_blend_mode(bm_add);
        draw_rectangle_colour(0 + changeW[1], 0, 400 + changeW[1], 608, c_black, c_teal, c_teal, c_black, false);
        break;
    default:
        draw_clear_alpha(c_black, 0);
        break;
}
surface_reset_target();
draw_surface(surf[1], xsurf, 0);
draw_set_blend_mode(bm_normal);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
