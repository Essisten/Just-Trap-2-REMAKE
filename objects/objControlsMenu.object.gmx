<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-120</depth>
  <persistent>0</persistent>
  <parentName>objMenuParent</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited();
select = 0;
alarm[0] = 1;
destX = 240;
xSelector = 500;
ySelector = 64;
xSeperation = 532;
ySeperation = 36;
offset = 20;
valueType[0] = -1;
valueType[1] = -1;
valueType[2] = -1;
valueType[3] = -1;
valueType[4] = -1;
valueType[5] = -1;
valueType[6] = -1;
valueType[7] = -1;
valueType[8] = -1;
valueType[9] = -1;
valueType[10] = -1;
valueType[11] = -1;
valueType[12] = -1;
valueType[13] = -1;
values = true;
strSelect[0] = "Device"
strSelect[1] = "Reset controls";
strSelect[2] = "Move Left";
strSelect[3] = "Move Right";
strSelect[4] = "Upwards";
strSelect[5] = "Downwards";
strSelect[6] = "Jump";
strSelect[7] = "Shoot";
strSelect[8] = "Restart";
strSelect[9] = "Skip";
strSelect[10] = "Sprint";
strSelect[11] = "Pause";
strSelect[12] = "Previous weapon";
strSelect[13] = "Next weapon";
optionsNum = array_length_1d(strSelect);
//Devices
strValue[3, 0] = "Keyboard";
gp_num = 10;
gp_sel = 0;
gp_connections = ds_list_create();
ds_list_add(gp_connections, -1);
key_listen = false;
for (var i = 1; i &lt;= gp_num; i++)
{
    if (gamepad_is_connected(i - 1))
    {
        ds_list_add(gp_connections, i - 1);
        strValue[3, i] = "Gamepad " + string(ds_list_size(gp_connections) - 1);
    }
}
gp_sel = ds_list_find_index(gp_connections, global.controllerIndex);
if (gp_sel == -1)
{
    gp_sel = 0;
    global.controllerIndex = -1;
}
key_duplicates = ds_list_create();
event_user(2);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (key_listen)
{
    var value = ds_list_find_value(values, select);
    if (keyboard_check_pressed(vk_anykey))  //check if a key is being pressed and if it is, store that key
    {
        scrPlaySound(sndMenuSelect);
        var keyChange = keyboard_key;
        var oldKey = ds_list_find_value(values, select);
        if (keyChange == 160 || keyChange == 161)   //check if current key pressed is either shift key
            keyChange = 16; //set it to work for both shift keys
        oldKey[0] = keyChange;
        ds_list_replace(values, select, oldKey);
        key_listen = false;
        event_user(4);
        event_user(2);
    }
    else if (scrAnyControllerButton() != -1)    //check if a controller button was pressed, exit prompt
    {
        var keyChange = scrAnyControllerButton();
        var oldKey = ds_list_find_value(values, select);
        scrPlaySound(sndBoss1_Reload);
        oldKey[0] = keyChange;
        ds_list_replace(values, select, oldKey);
        key_listen = false;
        event_user(4);
        event_user(2);
    }
    
}
else
    event_inherited();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="25">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Find duplicate key bindings
ds_list_clear(key_duplicates);
for (var i = 2; i &lt; ds_list_size(values); i++)
{
    var key = ds_list_find_value(values, i);
    if (global.controllerIndex == -1)
        var results = ds_list_find_all(values, key[0], 0);
    else
        var results = ds_list_find_all(values, key[1], 1);
    if (ds_list_size(results) &gt; 1)
        ds_list_add(key_duplicates, i);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save values
global.leftButton = ds_list_find_value(values, 2);
global.rightButton = ds_list_find_value(values, 3);
global.upButton = ds_list_find_value(values, 4);
global.downButton = ds_list_find_value(values, 5);
global.jumpButton = ds_list_find_value(values, 6);
global.shootButton = ds_list_find_value(values, 7);
global.restartButton = ds_list_find_value(values, 8);
global.skipButton = ds_list_find_value(values, 9);
global.sprintButton = ds_list_find_value(values, 10);
global.pauseButton = ds_list_find_value(values, 11);
global.prevWeaponButton = ds_list_find_value(values, 12);
global.nextWeaponButton = ds_list_find_value(values, 13);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>objControlsMenu</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Option paging
if (scrButtonCheckPressed(global.menuLeftButton))
{
    switch (select)
    {
        case 0:
            gp_sel--;
            if (gp_sel &lt; 0)
                gp_sel = ds_list_size(gp_connections) - 1;
            global.controllerIndex = ds_list_find_value(gp_connections, gp_sel);
            break;
        default:
            event_user(0);
            break;
    }
}
else
{
    switch (select)
    {
        default:
            event_user(0);
            break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Read values
ds_list_clear(values);
ds_list_add(values, global.controllerIndex);
ds_list_add(values, "");
ds_list_add(values, global.leftButton);
ds_list_add(values, global.rightButton);
ds_list_add(values, global.upButton);
ds_list_add(values, global.downButton);
ds_list_add(values, global.jumpButton);
ds_list_add(values, global.shootButton);
ds_list_add(values, global.restartButton);
ds_list_add(values, global.skipButton);
ds_list_add(values, global.sprintButton);
ds_list_add(values, global.pauseButton);
ds_list_add(values, global.prevWeaponButton);
ds_list_add(values, global.nextWeaponButton);
event_user(15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///going back
scrSaveControls();
objOptionsMenu.active = true;
destX = 500;
dest_alpha = 0;
active = false;
alarm[11] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Option selection
switch (select)
{
    case 0:
        gp_sel++;
        if (gp_sel &gt; ds_list_size(gp_connections) - 1)
            gp_sel = 0;
        global.controllerIndex = ds_list_find_value(gp_connections, gp_sel);
        break;
    case 1:
        //default controls
        if (global.controllerIndex == -1)
        {
            global.leftButton[0] = vk_left;
            global.rightButton[0] = vk_right;
            global.upButton[0] = vk_up;
            global.downButton[0] = vk_down;
            global.jumpButton[0] = vk_shift;
            global.shootButton[0] = ord("Z");
            global.restartButton[0] = ord("R");
            global.skipButton[0] = vk_space;
            global.sprintButton[0] = ord("X");
            global.pauseButton[0] = ord("P");
            global.prevWeaponButton[0] = ord("A");
            global.nextWeaponButton[0] = ord("S");
        }
        else
        {
            global.leftButton[1] = gp_padl;
            global.rightButton[1] = gp_padr;
            global.upButton[1] = gp_padu;
            global.downButton[1] = gp_padd;
            global.jumpButton[1] = gp_face1;
            global.shootButton[1] = gp_face3;
            global.restartButton[1] = gp_face4;
            global.skipButton[1] = gp_face2;
            global.sprintButton[1] = gp_select;
            global.pauseButton[1] = gp_start;
            global.nextWeaponButton[1] = gp_shoulderr;
            global.prevWeaponButton[1] = gp_shoulderl;
        }
        break;
    default:
        key_listen = true;
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
