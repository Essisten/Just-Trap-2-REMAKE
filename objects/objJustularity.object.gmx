<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprJustularityIdleBlue</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>100020</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>global.noPause = true;
image_speed = 0.2;
image_xscale = 3;
image_yscale = image_xscale;
mask_index = sprJustularityMask;
RedHP = 100;
BlueHP = 100;
maxHP[0] = 100;
maxHP[1] = 100;
phase = 1;
alarm[0] = 60;
god = true;
isRed = false;
wait = true;
waitTime = 100 - global.difficulty * 20;
jumping = false;
shooting = false;
reloading = false;
killable = true;
gravity_direction = 270;
gravity = 0.4;
destination = x;
spd = 3;
d = 0;
pitch = 1;
shootCounter = 0;
sound = -1;
grav = 1;
gravH = false;  //If current gravity is horizontal instead of vertical
prevGrav = 1;
prevGravH = false;
prevPlayerGrav = 3;
side = 3;
prevAct = 0;
act = -1;
j[0] = self;
j[1] = noone;
bullet = noone;
oldGrav = grav;
oldGravH = gravH;
oldPlayerGrav = prevPlayerGrav;
oldSide = side;
smoke = part_type_create();
part_type_alpha2(smoke, 0.8, 0);
part_type_life(smoke, 20, 30);
part_type_speed(smoke, 1, 2, 0, 0);
part_type_direction(smoke, 0, 360, 0, 0);
part_type_size(smoke, 0.2, 0.6, 0, 0);
part_type_shape(smoke, pt_shape_smoke);
emitter = part_emitter_create(global.saveParticleSystem);
with (instance_create(32, 32, objShowLabel))
{
    text = "Press [" + scrGetKeybind(global.skipButton[0]) + "] to skip ";
    if (global.skip[0])
        text += "phase 1";
    else
        text += "intro";
}
with (instance_create(x, y, objBossName))
{
    name = "Justularity";
    owner = other;
    yflip = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Changing pitch
var p = min(audio_sound_get_pitch(global.currentMusic), 1);
if (pitch &gt;= p)
    exit;
audio_sound_pitch(global.currentMusic, p - 1/256);
alarm[10] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>killable = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spawn Gugudian
instance_create(400, 304, objViridian);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack
var temp1 = RedHP;
var temp2 = BlueHP;
if (phase == 2)
{
    temp1 = maxHP[0];
    temp2 = maxHP[1];
}
if (isRed)
{
    if (temp1 &gt; 75)
        exit;
    if (temp1 &gt; 50)
        scrJustularityAttack(0);
    else if (temp1 &gt; 25)
        scrJustularityAttack(1);
    else if (temp1 &gt; 0)
        scrJustularityAttack(2);
    else
        scrJustularityAttack(irandom(2));
}
else
{
    if (temp2 &gt; 75)
        exit;
    if (temp2 &gt; 50)
        scrJustularityAttack(3);
    else if (temp2 &gt; 25)
        scrJustularityAttack(4);
    else if (temp2 &gt; 0)
        scrJustularityAttack(5);
    else
        scrJustularityAttack(irandom_range(3, 5));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Shooting in real time
shootCounter++;
var time = -1;
if (instance_exists(objPlayer))
{
    if (phase == 1)
    {
        if (shootCounter &lt; 4 + global.difficulty * 4)
            time = 10 - global.difficulty * 2;
        with (instance_create(x, y, objCherry))
        {
            direction = point_direction(x, y, objPlayer.x, objPlayer.y);
            speed = 4 + global.difficulty * 2;
            if (other.image_blend == c_black)
                sprite_index = sprJustularityBullet2;
            else
                sprite_index = sprJustularityBullet;
            image_xscale = 2;
            image_yscale = image_xscale;
        }
    }
    else
    {
        if (isRed)
        {
            if (instance_number(objJustularityStarCenter) &lt; 2)
            {
                with (instance_create(x, y, objJustularityStarCenter))
                    owner = other.id;
            }
        }
        else
        {
            if (shootCounter &lt;= (global.difficulty + 1) * 2)
                time = 13 - global.difficulty * 3;
            for (var i = 0; i &lt; 3; i++)
            {
                with (instance_create(x, y, objParalyzer))
                {
                    image_speed = 4 / room_speed;
                    sprite_index = sprJustularityRing;
                    direction = point_direction(x, y, objPlayer.x, objPlayer.y) + (i - 1) * 30;
                    image_angle = direction;
                    speed = 8 + (global.difficulty) * 2;
                    image_xscale = 2;
                    image_yscale = image_xscale;
                }
            }
        }
    }
}
alarm[6] = time;
if (time == -1)
{
    shootCounter = 0;
    shooting = false;
    scrJustularitySkin(0);
    image_speed = 0.2;
}
else
{
    scrPlaySound(sndBoss2_Shoot);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Real gravity change
gravH = prevGravH;
grav = prevGrav;
if (!instance_exists(objViridian))
{
    with (objPlayer)
        scrSetGrav(other.prevPlayerGrav);
    event_user(0);
    wait = false;
}
else
{
    prevPlayerGrav += choose(1, -1);
    if (prevPlayerGrav &gt; 4)
        prevPlayerGrav = 1;
    if (prevPlayerGrav &lt; 1)
        prevPlayerGrav = 4;
    with (objPlayer)
        scrSetGrav(other.prevPlayerGrav);
}
event_user(6);
act = -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do something
wait = false;
act = irandom(2);
while (act == prevAct)
    act = irandom(2);
switch (act)
{
    case 0:
        event_user(0);  //Walk
        break;
    case 1:  //Gravity
        event_user(1);
        if (phase == 2)
        {
            with (objJustularity)
                prevAct = 1;
        }
        break;
    case 2:
         event_user(8);
        break;
}
prevAct = act;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Smoking
if (!god or !global.particles)
    exit;
var rad = 16;
var upV = 16 * global.grav;
var upH = 0;
if (global.gravH)
{
    upH = upV;
    upV = 0;
}
if (speed &gt; 0)
    part_type_direction(smoke, direction + 150, direction + 210, 0, 0);
else
    part_type_direction(smoke, 0, 360, 0, 0);
part_emitter_region(global.saveParticleSystem, emitter, x - rad + upH, x + rad + upH, y + rad + upV, y - rad + upV, pt_shape_circle, ps_distr_gaussian);
part_emitter_burst(global.saveParticleSystem, emitter, smoke, 10);
//alarm[3] = 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop I-framing
alarm[1] = -1;
god = false;
image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///I-framing
if (image_alpha == 1)
    image_alpha = 0.2;
else
    image_alpha = 1;
alarm[1] = 5;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stop dancing like an idiot
image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Your personal hell
if (instance_exists(objPlayer) and hspeed == 0 and vspeed == 0)
{
    if (gravH)
    {
        if (objPlayer.y &lt; y)
            image_xscale = -3;
        else
            image_xscale = 3;
    }
    else
    {
        if (objPlayer.x &lt; x)
            image_xscale = 3;
        else
            image_xscale = -3;
    }
}
d += 4;
if (phase == 1)
    isRed = y &lt; 304;
if (jumping)
    scrJustularitySkin(2);
if (shooting)
    scrJustularitySkin(3);
if (wait or jumping or reloading)
    exit;

L = ((gravH and destination &gt; y) or (!gravH and destination &lt; x));
R = ((gravH and destination &lt; y) or (!gravH and destination &gt; x));
h = 0;
if (R)
    h = 1;
else if (L)
    h = -1;
if (isRed)
    spd = 4 + (((100 - RedHP) div 25) + 1) * global.difficulty;
else
    spd = 3 + (((100 - BlueHP) div 25) + 1) * global.difficulty;
if (gravH)
{
    if (h != 0 and hspeed == 0)  //moving
    {
        image_xscale = -h * 3;
        vspeed = spd * -h;
        scrJustularitySkin(1);
    }
    else    //not moving
    {
        vspeed = 0;
        if (hspeed == 0)
            scrJustularitySkin(0);
        else
            scrJustularitySkin(2);
    }
    if ((destination &lt;= y and y + vspeed &lt;= destination) or
    (destination &gt;= y and y + vspeed &gt;= destination))
    {
        vspeed = 0;
        y = destination;
        scrJustularitySkin(0);
        wait = true;
        alarm[4] = waitTime;
    }
    if (abs(hspeed) &gt; 32)
        hspeed = 31 * sign(hspeed);
}
else
{
    if (h != 0 and vspeed == 0)  //moving
    {
        image_xscale = -h * 3;
        hspeed = spd * h;
        scrJustularitySkin(1);
    }
    else    //not moving
    {
        hspeed = 0;
        if (vspeed == 0)
            scrJustularitySkin(0);
        else
            scrJustularitySkin(2);
    }
    if ((destination &lt;= x and x + hspeed &lt;= destination) or
    (destination &gt;= x and x + hspeed &gt;= destination))
    {
        hspeed = 0;
        x = destination;
        scrJustularitySkin(0);
        wait = true;
        alarm[4] = waitTime;
    }
    if (abs(vspeed) &gt; 32)
        vspeed = 31 * sign(vspeed);
}
if (shooting)
    scrJustularitySkin(3);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBullet">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (god)
    exit;
alarm[3] = 1;
//alarm[1] = 6;
//alarm[2] = 80;
//god = true;
if (!instance_exists(bullet))
   bullet = instance_nearest(x, y, objBullet);
var dmg = bullet.dmg * 2;//(11 - global.difficulty * 3);
instance_destroy(bullet);
var heal = (5 + global.difficulty * 5);
var temp1 = RedHP;
var temp2 = BlueHP;
if (phase == 2)
{
    temp1 = maxHP[0];
    temp2 = maxHP[1];
}
if (global.difficulty == 3)
    heal = 100;
if (isRed)
{
    if (temp1 &gt; 0)
    {
        temp1 = max(temp1 - dmg, 0);    
        scrPlaySound(sndBoss2_Damage);
        if (temp1 &lt;= 75 and alarm[7] == -1)
            alarm[7] = 1;
    }
    else
    {
        temp2 = min(temp2 + heal, 100);
        scrPlaySound(sndHeal);    
        if (global.particles)
        {
            part_emitter_region(global.saveParticleSystem, global.saveEmitter, x, x + 32, y, y + 32, pt_shape_square, ps_distr_gaussian);
            part_emitter_burst(global.saveParticleSystem, global.saveEmitter, global.saveParticles, 30);
        }
    }
}
else
{
    if (temp2 &gt; 0)
    {
        temp2 = max(temp2 - dmg, 0); 
        scrPlaySound(sndBoss2_Damage);
        if (temp2 &lt;= 75 and alarm[7] == -1)
            alarm[7] = 1;
    }
    else
    {
        temp1 = min(temp1 + heal, 100);
        scrPlaySound(sndHeal);        
        if (global.particles)
        {
            part_emitter_region(global.saveParticleSystem, global.saveEmitter, x, x + 32, y, y + 32, pt_shape_square, ps_distr_gaussian);
            part_emitter_burst(global.saveParticleSystem, global.saveEmitter, global.saveParticles, 30);
        }
    }
}
if (phase == 1)
{
    RedHP = temp1;
    BlueHP = temp2;
    with (objBoss2HP)
    {
        event_user(0);
    }
    if (temp1 &lt;= 0 and temp2 &lt;= 0)
    {
        event_user(3);
        alarm[7] = -1;
    }
}
else
{
    if (isRed)
    {
        maxHP[0] = temp1;
        objBoss2HP.HP[2] = maxHP[0];
    }
    else
    {
        maxHP[1] = temp2;
        objBoss2HP.HP[3] = maxHP[1];
    }
    if ((temp1 &lt;= 0 and isRed) or (temp2 &lt;= 0 and !isRed))
        event_user(2);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayer">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((image_blend == c_black and global.difficulty != 3) or !killable)
    exit;
scrKillPlayer();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objPlayerKiller">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!other.reflected)
   exit;
bullet = other;
event_perform(ev_collision, objBullet);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="objBlock">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>var distH = 0//30 * sign(hspeed);
var distV = 0//42 * sign(vspeed);
if (!place_free(x+hspeed+distH,y))
{
    if (grav == 1)   //normal
    {
        if(hspeed &lt;= 0)
            move_contact_solid(180,abs(hspeed));
        else
            move_contact_solid(0,abs(hspeed));
    }
    else    //flipped
    {
        if(hspeed &lt; 0)
            move_contact_solid(180,abs(hspeed));
        else
            move_contact_solid(0,abs(hspeed));
    }
    hspeed = 0;
    if (jumping)
    {
        jumping = false;
        if (gravH)
            destination = y;
        else
            destination = x;
    }
}
if (!place_free(x,y+vspeed+distV))
{
    if (grav == 1)   //normal
    {
        if(vspeed &lt;= 0)
            move_contact_solid(90,abs(vspeed));
        else
            move_contact_solid(270,abs(vspeed));
    }
    else    //flipped
    {
        if(vspeed &lt; 0)
            move_contact_solid(90,abs(vspeed));
        else
            move_contact_solid(270,abs(vspeed));
    }
    vspeed = 0;
    if (jumping)
    {
        jumping = false;
        if (gravH)
            destination = y;
        else
            destination = x;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="18">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reload animation

if (choose(true, false, true))
{
    reloading = true;
    shooting = true;
    if (isRed)
       sprite_index = sprJustularityReloadRed;
    else
       sprite_index = sprJustularityReloadBlue;
    //image_speed = 1/8;
    image_index = 0;
}
else
    event_user(5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="17">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create warning arrow
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="16">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Apply gravity direction
var dist = 16;
var ver = 72;
var hor = 30;
image_angle = 90 * gravH;
if (gravH)
{
    if (oldGrav != grav or oldGravH != gravH)
    {
        image_yscale = 3 * grav;
        gravity_direction = 90 + 90 * -grav;
        x += dist * grav;
        while (place_meeting(x, y, objBlock))
        {
            var tmp = false;
            if (!place_meeting(x, y + hor, objBlock))
                y += dist;
            else if (!place_meeting(x, y - hor, objBlock))
                y -= dist;
            else
                tmp = true;
            if (!place_meeting(x + ver * grav, y, objBlock) or tmp)
                x += dist * grav;
        }
        
    }
}
else
{
    if (oldGrav != grav or oldGravH != gravH)
    {
        image_yscale = 3 * grav;
        gravity_direction = 180 + 90 * grav;
        y += dist * grav;
        while (place_meeting(x, y, objBlock))
        {
            var tmp = false;
            if (!place_meeting(x + hor, y, objBlock))
                x += dist;
            else if (!place_meeting(x - hor, y, objBlock))
                x -= dist;
            else
                tmp = true;
            if (!place_meeting(x, y + ver * grav, objBlock) or tmp)
                y += dist * grav;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="15">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do jump
jumping = true;
var xx = x;
var yy = y;
var high = 80;
switch (gravity_direction)
{
    case 0:
        xx -= high;
        break;
    case 90:
        yy += high;
        break;
    case 180:
        xx += high;
        break;
    case 270:
        yy -= high;
        break;
}
if (gravity_direction == 0 or gravity_direction == 180)
{
    if (y &lt; 300)
        yy += high;
    else
        yy -= high;
}
else
{
    if (x &lt; 404)
        xx += high;
    else
        xx -= high;
}
direction = point_direction(x, y, xx, yy);
speed = 10 + random(5);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="14">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start phase 2
phase = 2;
image_speed = 0.2;
prevAct = 1;
waitTime *= 2;
j[1] = instance_copy(false);
with (j[1])
{
    if (gravH)
        destination = y;
    else
        destination = x;
    isRed = !other.isRed;
    prevGrav = -other.prevGrav;
    side = other.side + 2;
    if (side &gt; 4)
        side -= 4;
    event_user(6);
    alarm[5] = 1;
    alarm[0] = -1;
    j[1] = self.id;
    j[0] = other.id;
}
if (j[1].isRed)
   j[1].waitTime *= 0.8;
else
    waitTime *= 0.8;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="13">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Activating phase transition
audio_stop_sound(global.currentMusic);
if (alarm[5] &gt; -1)
{
   prevGrav = oldGrav;
   prevGravH = oldGravH;
   prevPlayerGrav = oldPlayerGrav;
   side = oldSide;
}
for (var i = 0; i &lt; 8; i++)
{
    alarm[i] = -1;
}
wait = true;
god = true;
shooting = false;
jumping = false;
scrJustularitySkin(0);
speed = 0;
image_speed = 0;
RedHP = 0;
BlueHP = 0;
if (gravH)
{
    destination = y;
}
else
{
    destination = x;
}
alarm[8] = 150;
with (objJustularityBall)
    event_user(0);
with (objJustularityBall)
    counter = 101;
with (objJustularityBomb)
    event_user(0);
with (objBoss2HP)
{
    phase = 2;
    play = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="12">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death
instance_destroy();
scrPlaySound(sndBoss2_Death);
with (objJustularityBall)
    event_user(0);
with (objJustularityBall)
    counter = 101;
for (var i = 0; i &lt; 8; i++)
{
    var e = instance_create(x, y, objCherry);
    e.speed = 4;
    e.direction = i * 45;
    e.sprite_index = sprJustularityDeath;
    e.image_speed = 4 / room_speed;
    e.image_xscale = 3;
    e.image_yscale = e.image_xscale;
}
if (instance_number(objJustularity) == 0 and instance_exists(objPlayer))
{
    audio_stop_sound(global.currentMusic);
    objWorld.alarm[2] = 300;
    global.frozen = true;
    global.unlockedWeapons[2] = true;
    with (objBoss2HP)
    {
        play = false;
        alarm[3] = 300;
    }
    with (objTornado)
         alarm[2] = 5;
}
else
{
    for (i = 0; i &lt; global.difficulty+1; i++)
    {
        tornado = instance_create(x, y, objTornado);
        tornado.gravity_direction = gravity_direction + 90 * i;
    }
    if (global.musicSlowdown)
    {
        with (objJustularity)
        {
            pitch -= 32/256;
            alarm[10] = 5;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Preparing for changing gravity
var tmp = prevPlayerGrav;
oldSide = side;
oldPlayerGrav = prevPlayerGrav;
oldGrav = grav;
oldGravH = gravH;
while (tmp == prevPlayerGrav)
{
    tmp = irandom_range(1, 4);
    if (tmp == 1 or tmp == 4)
        prevGrav = 1;
    else
        prevGrav = -1;
    if (phase == 1)
    {
        if (tmp == 1 or tmp == 3)
            prevGravH = false;
        else
            prevGravH = true;
    }
    else
        prevGravH = choose(true, false);
    if (prevGravH)
    {
        if (prevGrav)
            side = 2;
        else
            side = 4;
    }
    else
    {
        if (prevGrav)
            side = 3;
        else
            side = 1;
    }
    for (var i = 0; i &lt; instance_number(objJustularity); i++)
    {
        if (!instance_exists(j[i]))
            continue;
        if (j[i].side == tmp)
            tmp = prevPlayerGrav;
    }
}
prevPlayerGrav = tmp;
if (global.difficulty &lt; 3)
{
    with (instance_create(400, 304, objBoss2Warning))
    {
        if (other.image_blend == c_black)
            image_index = 1;
        image_angle = (other.prevPlayerGrav - 1) * -90;
        direction = image_angle + 90;
    }
}
wait = true;
alarm[5] = 50;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///New destination
if (gravH)
    destination = random_range(80, 520);
else
    destination = random_range(80, 724);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (!reloading)
   exit;
image_speed = 0;
reloading = false;
event_user(5);
alarm[6] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (x &lt; 0)
    x = 128;
else if (x &gt; 800)
    x = 672;
if (y &lt; 0)
    y = 128;
else if (y &gt; 608)
    y = 480;
scrPlaySound(sndAppearV);
instance_create(0, 0, objLightEffect);
if (global.difficulty == 3)
    exit;
killable = false;
alarm[9] = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ((RedHP &lt;= 0 and isRed) or (BlueHP &lt;= 0 and !isRed) or phase == 2)
{
    image_blend = c_black;
    var rad = 96 + sin(degtorad(d)) * 16;
    var clr = c_teal;
    if (isRed)
        clr = c_maroon;
    draw_set_blend_mode(bm_add);
    draw_ellipse_colour(x - rad, y - rad, x + rad, y + rad, clr, c_black, false);
    draw_set_blend_mode(bm_normal);
}
else
    image_blend = c_white;
draw_self();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
