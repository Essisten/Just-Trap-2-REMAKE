<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-10</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sx[0] = 0;
sx[1] = 800;
sy[0] = 300;
sy[1] = 608;
sqSpd = 16;
sOffsetY = 16;
sMax = 300;
text[0] = "START";
text[1] = "SETTINGS";
text[2] = "EXIT";
sel = 0;
oldSel = 0;
a = 0;
blocked = false;
sepY = 64;
textX = 400;
textY = 400;
textClr = c_white;
alarm[0] = 1;
next = rOptions;
state = 0;
saveX = 900;
saveY = 230;
saveSpd = 32;
saveW = 500;
saveH = 110;
saveMax = 400 - saveW / 2;
saveOffset = 20;
saveOffset2 = 25;
saveOffset3 = 10;
saveBorder = 4;
//initiailze menu variables
difSel = -1;
ySeperation = 120;
xSeperation = 160;
str[0] = "Save 1";
str[1] = "Save 2";
str[2] = "Save 3";
alarm[0] = 10;
dif[0] = "Very Easy";
dif[1] = "Easy";
dif[2] = "Hard";
dif[3] = "Happilous";
warning[0] = "No";
warning[1] = "Yes";
//load save file values

for (var i = 0; i &lt; 3; i++)
{
    if (file_exists(global.dir + "Data\save"+string(i+1)))  //check if current save exists
    {
        //load save data
        exists[i] = true;
        //load the save map
        var saveMap;
        if (global.extraSaveProtection) //use ds_map_secure function
        {
            saveMap = ds_map_secure_load(global.dir + "Data\save"+string(i+1));
        }
        else    //use text file
        {
            var f = file_text_open_read(global.dir + "Data\save"+string(i+1));
            saveMap = json_decode(base64_decode(file_text_read_string(f)));
            file_text_close(f);
        }
        if (saveMap != -1)  //check if the save map loaded correctly
        {
            death[i] = ds_map_find_value(saveMap,"death");
            if (is_undefined(death[i])) //check for undefined value in case the save was messed with or got corrupted
                death[i] = 0;
            time[i] = ds_map_find_value(saveMap,"time");
            if (is_undefined(time[i]))
                time[i] = 0;
            difficulty[i] = ds_map_find_value(saveMap,"difficulty");
            if (is_undefined(difficulty[i]))
                difficulty[i] = 0;
            for (var j = 0; j &lt; 8; j++)
            {
                boss[j,i] = ds_map_find_value(saveMap,"saveBossItem["+string(j)+"]");
                if (is_undefined(boss[j,i]))
                    boss[j,i] = false;
            }
            clear[i] = ds_map_find_value(saveMap,"saveGameClear");
            if (is_undefined(clear[i]))
                clear[i] = false;
            ds_map_destroy(saveMap);
        }
        else
        {
            //save map didn't load correctly, set the variables to the defaults
            death[i] = 0;
            time[i] = 0;
            difficulty[i] = 0;
            for (var j = 0; j &lt; 8; j++)
            {
                boss[j,i] = false;
            }
            clear[i] = false;
        }
    }
    else
    {
        exists[i] = false;
        death[i] = 0;
        time[i] = 0;
    }
    var t = time[i];
    timeStr[i] = string(t div 3600) + ":";
    t = t mod 3600;
    timeStr[i] += string(t div 600);
    t = t mod 600;
    timeStr[i] += string(t div 60) + ":";
    t = t mod 60;
    timeStr[i] += string(t div 10);
    t = t mod 10;
    timeStr[i] += string(floor(t));
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objLightEffect))
    alarm[4] = 1;
else
    game_end();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save menu slides away
if (saveX &lt; 900)
    saveX = min(saveX + saveSpd, 900);
if (textX &lt; 400)
{
    textX += saveSpd;
    sx[0] += saveSpd;
    sx[1] += saveSpd;
}
if (saveX &lt; 800 or textX &lt; 400)
    alarm[3] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Save menu slide in
if (saveX &gt; saveMax)
    saveX = max(saveX - saveSpd, saveMax);
if (textX &gt; -100)
{
    textX -= saveSpd;
    sx[0] -= saveSpd;
    sx[1] -= saveSpd;
}
if (textX &gt; -100 or saveX &gt; saveMax)
    alarm[2] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (instance_exists(objLightEffect))
    alarm[1] = 1;
else
    room_goto(next);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (sx[0] &lt; sMax)
    sx[0] = min(sx[0] + sqSpd, sMax);
if (sx[1] &gt; 800 - sMax)
    sx[1] = max(sx[1] - sqSpd, 800 - sMax);
if (sy[0] &lt; textY)
    sy[0] = min(sy[0] + sqSpd, textY);
if (sy[1] &gt; textY + array_length_1d(text) * sepY)
    sy[1] = max(sy[1] - sqSpd, textY + array_length_1d(text) * sepY);
if (a &lt; 1)
    a += 0.05;
if (sx[0] &lt; sMax or sx[1] &gt; 800 - sMax or sy[0] &lt; textY or sy[1] &gt; textY + array_length_1d(text) * sepY)
    alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (blocked)
    exit;
if (scrButtonCheckPressed(global.menuAcceptButton) or scrButtonCheckPressed(global.menuOptionsButton))
{
    scrPlaySound(sndBoss1_Reload);
    switch (state)
    {
        case 0:
            sx[0] = sMax;
            sx[1] = 800 - sMax;
            sy[0] = textY;
            sy[1] = textY + array_length_1d(text) * sepY;
            a = 1;
            alarm[0] = -1;
            switch (sel)
            {
                case 0:
                    state = 1;
                    sel = 0;
                    alarm[2] = 1;
                    alarm[3] = -1;
                    break;
                case 1:
                    alarm[1] = 20;
                    blocked = true;
                    scrCreateFade(c_black, 0.05, true);
                    break;
                case 2:
                    blocked = true;
                    alarm[4] = 20;
                    scrCreateFade(c_black, 0.05, true);
                    break;
            }
        break;
        case 1:
            state = 2;
            if (exists[sel]) //check if there is a save in the current slot
                difSel = -1;   //default to load game
            else
                difSel = 0;    //default to medium
            break;
        case 2:
            oldSel = difSel;
            if (difSel == -1)  //load game
            {
                if (exists[sel])
                {
                    global.savenum = sel + 1;
                    scrLoadGame(true);
                }
            }
            else    //starts new game
            {
                if (!exists[sel])
                    event_user(0);
                else
                    state = 3;
            }
            break;
        case 3:
            if (difSel)
                event_user(0);
            else
                state--;
            break;
    }
}
else if (scrButtonCheckPressed(global.menuBackButton))
{
    if (state == 1)
    {
        alarm[2] = -1;
        alarm[3] = 1;
        sel = 0;
    }
    if (state &gt; 0)
    {
        scrPlaySound(sndBoss1_Reload);
        state--;
    }
}
if (state &gt; 1)
{
    if (scrButtonCheckPressed(global.menuLeftButton))
    {
        scrPlaySound(sndBoss1_Reload, 1.5);
        if (state == 2)
        {
            difSel--;
            if (exists[sel])
            {
                if (difSel &lt; -1)
                    difSel = 3;
            }
            else
            {
                if (difSel &lt; 0)
                    difSel = 3;
            }
        }
        else
            difSel = !difSel;
    }
    else if (scrButtonCheckPressed(global.menuRightButton))
    {
        scrPlaySound(sndBoss1_Reload, 1.5);
        if (state == 2)
        {
            difSel++;
            if (difSel &gt; 3)
            {
                if (exists[sel])
                    difSel = -1;
                else
                    difSel = 0;
            }
        }
        else
            difSel = !difSel;
    }
}
else
{
    if (scrButtonCheckPressed(global.menuUpButton))
    {
        scrPlaySound(sndBoss1_Reload, 1.5);
        sel--;
        if (state == 0)
        {
            if (sel &lt; 0)
                sel = array_length_1d(text) - 1;
        }
        else if (state == 1)
        {
            if (sel &lt; 0)
                sel = 2;
        }
    }
    else if (scrButtonCheckPressed(global.menuDownButton))
    {
        scrPlaySound(sndBoss1_Reload, 1.5);
        sel++;
        if (state == 0)
        {
            if (sel &gt;= array_length_1d(text))
                sel = 0;
        }
        else if (state == 1)
        {
            if (sel &gt; 2)
                sel = 0;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Start new game
global.gameStarted = true; //sets game in progress (enables saving, restarting, etc.)
global.autosave = true;
global.savenum = sel + 1;
global.difficulty = oldSel;
if (file_exists(global.dir + "Data\save"+string(global.savenum)))
    file_delete(global.dir + "Data\save"+string(global.savenum));
room_goto(global.startRoom);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(a);
draw_set_colour(c_black);
draw_rectangle(sx[0], sy[0] - sOffsetY, sx[1], sy[1] - sOffsetY, false);
draw_set_alpha(a);
draw_set_font(fDefault24);
draw_set_halign(fa_center);
for (var i = 0; i &lt; 3; i++)
{
    if (sel == i and state == 0)
        textClr = c_red;
    else
        textClr = c_white;
    scrDrawTextOutline(textX, textY + sepY * i, text[i], textClr, c_black);
}
draw_set_alpha(1);

for(var i = 0; i &lt; 3; i += 1)
{
    draw_set_colour(c_black);
    draw_rectangle(saveX, saveY + ySeperation * i, saveX + saveW, saveY + saveH + ySeperation * i, false);
    draw_set_colour(c_white);
    draw_rectangle(saveX, saveY + ySeperation * i, saveX + saveW + saveBorder, saveY + ySeperation * i - saveBorder, false); //top
    draw_rectangle(saveX, saveY + ySeperation * i - saveBorder, saveX - saveBorder, saveY + saveH + ySeperation * i + saveBorder, false);   //left
    draw_rectangle(saveX, saveY + saveH + ySeperation * i, saveX + saveW + saveBorder, saveY + saveH + ySeperation * i + saveBorder, false);    //bottom
    draw_rectangle(saveX + saveW, saveY + ySeperation * i, saveX + saveW + saveBorder, saveY + saveH + ySeperation * i, false); //right
    draw_set_colour(c_black);
    var clr = c_white;
    if (i == sel)
        clr = c_red;
    draw_set_halign(fa_left)
    draw_set_font(fDefault30);
    scrDrawTextOutline(saveX + saveOffset, saveY + ySeperation * i + saveOffset2, str[i], clr, c_black);
    if (!exists[i])
    {
        if (state &lt; 2 or i != sel)
            scrDrawTextOutline(saveX + xSeperation * 1.5 + saveOffset, saveY + ySeperation * i + saveOffset * 1.5 - saveOffset3, "No Data" ,clr ,c_black);
    }
    else
    {
        draw_set_font(fDefault12);
        scrDrawTextOutline(saveX + xSeperation * 2 + saveOffset * 2, saveY + ySeperation * i + saveOffset - saveOffset3, "Deaths: " + string(death[i]), clr, c_black);
        scrDrawTextOutline(saveX + xSeperation * 2 + saveOffset * 2, saveY + ySeperation * i + saveOffset * 2 - saveOffset3, "Time: " + timeStr[i] ,clr , c_black);     
        scrDrawTextOutline(saveX + xSeperation + saveOffset, saveY + ySeperation * i + saveOffset - saveOffset3,"Difficulty: " + dif[difficulty[i]], clr ,c_black);
        draw_set_font(fDefault24);
        if (clear[i])
            scrDrawTextOutline(saveX + xSeperation + saveOffset, saveY + ySeperation * i + saveOffset * 4 - saveOffset3, "FINISHED" ,clr ,c_black);
    }
    if (exists[i] or (i == sel and state &gt; 1))
    {
        var sub = 0;
        if (exists[i])
            sub = difficulty[i];
        if (i == sel)
        {
            if (state == 2)
                sub = difSel;
            if (state == 3)
                sub = 4;
        }
        draw_sprite_ext(sprDiffIcon, sub + 1, saveX + xSeperation * 1.5, saveY + ySeperation * i + saveOffset * 2 - saveOffset3, 4, 4, 0, c_white, 1);
    }
    draw_set_halign(fa_center);
    draw_set_font(fDefault12);
    if (i == sel)
    {
        if (state == 2)
        {
            if (difSel == -1)
                scrDrawTextOutline(saveX + xSeperation * 2.5 + saveOffset, saveY + ySeperation * i + saveOffset * 4 - saveOffset3, "&lt; Continue &gt;" ,clr , c_black);
            else
                scrDrawTextOutline(saveX + xSeperation * 2.5 + saveOffset, saveY + ySeperation * i + saveOffset * 4 - saveOffset3, "&lt; " + dif[difSel] + " &gt;" ,clr , c_black);
        }
        else if (state == 3)
        {
            scrDrawTextOutline(saveX + xSeperation * 2.5 + saveOffset, saveY + ySeperation * i + saveOffset * 4 - saveOffset3, "New Game?" ,clr ,c_black);
            var choice = "No";
            if (difSel)
                choice = "Yes";
            scrDrawTextOutline(saveX + xSeperation * 2.5 + saveOffset, saveY + ySeperation * i + saveOffset * 5 - saveOffset3, "&lt; " + choice + " &gt;" ,clr ,c_black);
        }
    }
    
}
draw_set_colour(c_white);
scrDrawTextOutline(100, 10, "Just Trap made by: Just", c_yellow, c_black);
scrDrawTextOutline(680, 10, "Remake made by: Essisten", c_red, c_black);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
