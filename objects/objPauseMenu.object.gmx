<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>w = 0;
spd = 8;
maxW = 128;
sel = 0;
text[0] = "RESUME";
text[1] = "SETTINGS";
text[2] = "MAIN MENU";
text[3] = "EXIT";
maxSel = array_length_1d(text) - 1;
sep = 48;
textY = view_hview[0] / 2 - sep / 2 * (maxSel);
textX = (view_wview[0] - view_xview[0]) / 2;
sOffsetV = 32;
sOffsetH = 128;
child = noone;
alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Option selected
if (sel != 1)
{
    w -= spd;
    if (w &gt; 0)
    {
        alarm[1] = 1;
        exit;
    }
}

switch (sel)
{
    case 0:
        global.gamePaused = false;
        global.pauseDelay = global.pauseDelayLength;
        instance_activate_all();
        if (surface_exists(global.pauseSurf))
            surface_free(global.pauseSurf);
        scrSaveConfig();
        io_clear(); //clear input states to prevent possible pause strats/exploits
        instance_destroy();
        break;
    case 1:
        child = instance_create(0, 0, objOptionsMenu);
        break;
    case 2:
        global.gameStarted = false;
        global.gamePaused = false;
        room_goto(rTitle);
        break;
    case 3:
        game_end();
        break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>w += spd;
if (w &lt; maxW)
    alarm[0] = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (alarm[0] &gt; -1 or alarm[1] &gt; -1 or instance_exists(child))
    exit;
if (scrButtonCheckPressed(global.menuUpButton))
{
    scrPlaySound(sndBoss1_Reload, 1.5);
    sel--;
    if (sel &lt; 0)
        sel = maxSel;
}
else if (scrButtonCheckPressed(global.menuDownButton))
{
    scrPlaySound(sndBoss1_Reload, 1.5);
    sel++;
    if (sel &gt; maxSel)
        sel = 0;
}
else if (scrButtonCheckPressed(global.menuAcceptButton) or scrButtonCheckPressed(global.menuOptionsButton))
{
    scrPlaySound(sndBoss1_Reload);
    if (sel &gt; 1)
        scrCreateFade(c_black, 1 / (maxW / spd), true);
    alarm[1] = 1;
}
else if (scrButtonCheckPressed(global.menuBackButton) or scrButtonCheckPressed(global.pauseButton))
{
    sel = 0;
    alarm[1] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(1);
draw_clear(c_black);
draw_set_colour(c_black);
if (surface_exists(global.pauseSurf))       //check if surface exists before drawing it
    draw_surface(global.pauseSurf,0,0);
draw_set_alpha(0.4);
draw_rectangle(-1,-1,display_get_gui_width(),display_get_gui_height(),0);    //darken the paused screen
draw_set_alpha(1);
draw_set_blend_mode(bm_add);
draw_rectangle_colour(view_xview[0], view_yview[0], view_xview[0] + w, view_yview[0] + view_hview[0], c_aqua, c_black, c_black, c_aqua, false);
draw_rectangle_colour(view_xview[0] + view_wview[0] - w, view_yview[0], view_xview[0] + view_wview[0], view_yview[0] + view_hview[0], c_black, c_red, c_red, c_black, false);
draw_set_blend_mode(bm_normal);

if (instance_exists(child))
    exit;
draw_set_halign(fa_center);
draw_set_valign(fa_center);
draw_set_font(fDefault30);
draw_set_alpha(w / maxW * 0.8);
draw_set_colour(c_black);
draw_rectangle(textX - sOffsetH, textY - sOffsetV, textX + sOffsetH, textY + sep * (maxSel + 1.5) + sOffsetV, false);

draw_set_alpha(w / maxW);
for (var i = 0; i &lt;= maxSel; i++)
{
    var clr = c_white;
    if (sel == i)
        clr = c_red;
    scrDrawTextOutline(textX, textY + sep * (i), text[i], clr, c_black);
}

draw_set_halign(fa_left);
draw_set_font(fDefault18);

var t = global.time;
var timeText = string(t div 3600) + ":";
t = t mod 3600;
timeText += string(t div 600);
t = t mod 600;
timeText += string(t div 60) + ":";
t = t mod 60;
timeText += string(t div 10);
t = t mod 10;
timeText += string(floor(t));

draw_set_color(c_white);
draw_sprite_ext(sprDiffIcon, 5, textX - sOffsetH / 3, textY - 20 + sep * (maxSel + 1), 2, 2, 0, c_white, draw_get_alpha());
draw_sprite(sprClock, 0, textX - sOffsetH / 3,  textY + sep * (maxSel + 1.5));
scrDrawTextOutline(textX - sOffsetH / 3 + 16,  textY + sep * (maxSel + 1), "x" + string(global.death), c_white, c_black);
scrDrawTextOutline(textX - sOffsetH / 3 + 16,  textY + sep * (maxSel + 1.5), timeText, c_white, c_black);
draw_set_alpha(1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
