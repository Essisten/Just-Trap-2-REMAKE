<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>select = 0;
submenu = -1;
dick = 0;
weaponStartX = 10;
weaponStartY = 10;
weaponEndX = 790;
weaponEndY = 240;
weaponNameX = 232;
weaponNameY = 32;
weaponDescriptionX = 420;
weaponDescriptionY = 32;
weapons[0] = scrCreateShopItem("The Gun",
"    The classic standard pistol of our famous Kid. It had been many years since the original user used it before Just got it.
#    Initially, it has only a manual firing method, but it is possible to install an auto-firing module.",
"fast",
"middle",
"far",
0);
weapons[1] = scrCreateShopItem("Shotgun",
"    Known killer weapon. It breaks the bullets into pieces right after firing to multiply their number. This reduces the flight speed, but significantly increases the damage radius.
#    The sharp fragments together are capable of penetrating enemy's defenses, which increases overall damage compared to The Gun.",
"slow",
"good",
"short",
1000);
weapons[2] = scrCreateShopItem("Machine gun",
"    An extremely lethal and heavy weapon. Combining multiple the guns together made it possible to create a weapon with a high rate of fire, while maintaining the power of each bullet.
#    Disadvantages include reduced accuracy, as well as reduced user mobility.",
"TRA-TA-TA",
"middle",
"far",
5000);
lineSeperation = 48;
optionsNum = array_length_1d(weapons);
boxStartX = 300;
boxStartY = 250;
boxEndX = 540;
boxEndY = boxStartY + lineSeperation * (optionsNum);
lineCenter = boxStartX + (boxEndX - boxStartX) / 2;
selectBoxOffset = 4;
slideOffset = 160;
alarm[0] = 1;
image_alpha = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Epic sliding out
if (slideOffset &gt; 300)
{
    instance_destroy();
    exit;
}
slideOffset += 8;
if (image_alpha &gt; 0)
   image_alpha -= 0.05;
alarm[1] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Epic sliding in
if (slideOffset &lt;= 0)
{
    slideOffset = 0;
    image_alpha = 1;
    exit;
}
slideOffset -= 8;
if (image_alpha &lt; 1)
   image_alpha += 0.05;
alarm[0] = 1;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (scrButtonCheckPressed(global.menuUpButton))
{
    scrPlaySound(sndBoss1_Reload, 1.5);
    select -= 1;
    if(select &lt; 0)
        select = optionsNum-1;
}
else if (scrButtonCheckPressed(global.menuDownButton))
{
    scrPlaySound(sndBoss1_Reload, 1.5);
    select += 1;
    if(select &gt; optionsNum-1)
        select = 0;
}
else if (scrButtonCheckPressed(global.menuBackButton))
{
    scrPlaySound(sndBoss1_Reload);
    alarm[0] = -1;
    alarm[1] = 1;
}
else if (scrButtonCheckPressed(global.menuAcceptButton))
{
     switch (select)
     {
        default:
            scrPlaySound(sndGlass, 1);
            break;
     }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_alpha(0.8 * image_alpha);
draw_rectangle_colour(weaponStartX, weaponStartY -  + slideOffset, weaponEndX, weaponEndY -  + slideOffset, c_black, c_black, c_black, c_black, false);
draw_set_alpha(image_alpha);
draw_set_halign(fa_left);
draw_set_valign(fa_top);
draw_set_colour(c_white);

draw_set_alpha(0.6 * image_alpha);
draw_rectangle_colour(boxStartX + slideOffset, boxStartY, boxEndX + slideOffset, boxEndY, c_black, c_black, c_black, c_black, false);
dick += 2;

draw_set_alpha(image_alpha);
draw_set_colour(c_black);
quad(boxStartX + slideOffset, boxStartY + lineSeperation * select,
boxEndX + selectBoxOffset * 2 + slideOffset, boxStartY + lineSeperation * select,
boxStartX - selectBoxOffset * 2 + slideOffset, boxStartY + selectBoxOffset + lineSeperation * (select + 1),
boxEndX + slideOffset, boxStartY + selectBoxOffset + lineSeperation * (select + 1));
draw_set_colour(c_white);
draw_line_width(boxStartX + slideOffset, boxStartY + lineSeperation * select, boxEndX + selectBoxOffset * 2 + slideOffset, boxStartY + lineSeperation * select, 4);
draw_line_width(boxStartX - selectBoxOffset * 2 + slideOffset, boxStartY + selectBoxOffset + lineSeperation * (select + 1), boxEndX + slideOffset, boxStartY + selectBoxOffset + lineSeperation * (select + 1), 4);
draw_line_width(boxStartX + slideOffset, boxStartY + lineSeperation * select, boxStartX - selectBoxOffset * 2 + slideOffset, boxStartY + selectBoxOffset + lineSeperation * (select + 1), 4);
draw_line_width(boxEndX + selectBoxOffset * 2 + slideOffset, boxStartY + lineSeperation * select, boxEndX + slideOffset, boxStartY + selectBoxOffset + lineSeperation * (select + 1), 4);

draw_text_ext_transformed(weaponNameX, weaponNameY - slideOffset, weapons[select].name, 32, weaponDescriptionX - weaponNameX, 1, 1, 0);
draw_set_font(fDefault12);
scrDrawTextOutline(weaponNameX, weaponNameY + 64 - slideOffset, "Damage: " + weapons[select].dmg, c_red, c_maroon);
scrDrawTextOutline(weaponNameX, weaponNameY + 80 - slideOffset, "Range:   " + weapons[select].range, c_yellow, c_orange);
scrDrawTextOutline(weaponNameX, weaponNameY + 96 - slideOffset, "Speed:   " + weapons[select].spd, c_aqua, c_blue);
draw_set_colour(c_white);
draw_set_font(fDetermination14);
draw_text_ext_transformed(weaponDescriptionX, weaponDescriptionY - slideOffset, weapons[select].description, 20, 780 - weaponDescriptionX, 1, 1, 0);
draw_set_font(fDefault24);
if (true)//global.obtainedWeapons[select])
{
    draw_set_colour(c_green);
    scrDrawTextOutline(weaponNameX, weaponNameY + 160 - slideOffset, "Obtained", c_lime, c_green);
}
else
{
    
}
dick += 2;
draw_set_colour(c_white);
draw_set_valign(fa_center);
draw_sprite_ext(sprWeaponImage, select, weaponStartX, weaponStartY + (weaponEndY - weaponStartY) / 2 - slideOffset, 3.4, 3.4, 0, c_white, image_alpha);
draw_set_halign(fa_center);
draw_set_valign(fa_top);
draw_set_font(fDefault24);
for (var i = 0; i &lt; optionsNum; i++)
{
    var color;
    if (global.obtainedWeapons[i])
       color = c_green;
    else if (global.unlockedWeapons[i])
       color = c_white;
    else
       color = c_gray;
    scrDrawTextOutline(lineCenter + slideOffset, boxStartY + selectBoxOffset * 2 + lineSeperation * (i), weapons[i].name, color, c_black);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
